// <auto-generated />
using System;
using Hackathon.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hackathon.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231029083647_add new init data")]
    partial class addnewinitdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.23");

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.Property<int>("AnswersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswersId", "OptionsId");

                    b.HasIndex("OptionsId");

                    b.ToTable("AnswerOption");
                });

            modelBuilder.Entity("Hackathon.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "myemail@mail.com",
                            PasswordHash = "A02CB78D91D3079A6D245A45FDBEC9472C25C323"
                        },
                        new
                        {
                            Id = 2,
                            Email = "myemail2@mail.com",
                            PasswordHash = "B12D0A0F9688163B3A744B87A2340904018986D7"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassedTestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PassedTestsId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Hackathon.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "default"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "текст"
                        },
                        new
                        {
                            Id = 2,
                            Name = "иллюстрация"
                        },
                        new
                        {
                            Id = 3,
                            Name = "видео"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ссылка на учебный материал"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 2,
                            Description = "Это курс про веб",
                            Name = "Веб-разработка"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            Description = "Это курс про тестирование",
                            Name = "Тестирование"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            Description = "Это курс про разработку игр",
                            Name = "Разработка игр"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HR ",
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "IT ",
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "IT ",
                            OrganizationId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "HR ",
                            OrganizationId = 2
                        });
                });

            modelBuilder.Entity("Hackathon.Models.EducationalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CourseId");

                    b.ToTable("EducationalMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Веб-разработка это ...",
                            ContentTypeId = 1,
                            CourseId = 1,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 2,
                            Content = "https://www.youtube.com/watch?v=Ot1dBokdPFw",
                            ContentTypeId = 3,
                            CourseId = 1,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 3,
                            Content = "Итак мы поняли, что веб-разработка это ...",
                            ContentTypeId = 1,
                            CourseId = 1,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 4,
                            Content = "Тестирование это ...",
                            ContentTypeId = 1,
                            CourseId = 2,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 5,
                            Content = "https://www.youtube.com/watch?v=liirXTlmmRY",
                            ContentTypeId = 3,
                            CourseId = 2,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 6,
                            Content = "Итак мы поняли, что тестирование это ...",
                            ContentTypeId = 1,
                            CourseId = 2,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 7,
                            Content = "Разработка игр ...",
                            ContentTypeId = 1,
                            CourseId = 3,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 8,
                            Content = "https://www.youtube.com/watch?v=nRGOW9O7ARk",
                            ContentTypeId = 3,
                            CourseId = 3,
                            IsPublic = true
                        },
                        new
                        {
                            Id = 9,
                            Content = "Итак мы поняли ...",
                            ContentTypeId = 1,
                            CourseId = 3,
                            IsPublic = true
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Post")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 2,
                            RoleId = 2,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            RoleId = 4,
                            StatusId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            Name = "Пункт 2",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            Name = "Пункт 3",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = true,
                            Name = "Пункт 4",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            Name = "Пункт 3",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            Name = "Пункт 4",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = false,
                            Name = "Пункт 1",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = true,
                            Name = "Пункт 2",
                            QuestionId = 12
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Goal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mission")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TariffId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("TariffId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Орловская область, город Люберцы, въезд Бухарестская, 34",
                            ColorId = 1,
                            Inn = "1231231321231",
                            Name = "Technopoint",
                            TariffId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Новгородская область, город Можайск, пер. Будапештсткая, 79",
                            ColorId = 1,
                            Inn = "234324324234",
                            Name = "JustOrganization",
                            TariffId = 1
                        });
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CompletionPercent")
                        .HasColumnType("REAL");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOver")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TestId");

                    b.ToTable("PassedTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttemptNumber = 1,
                            CompletionPercent = 67.0,
                            EmployeeId = 2,
                            IsOver = true,
                            TestId = 1
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Вопоос 1 ...",
                            Points = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Вопоос 2 ...",
                            Points = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Вопоос 3 ...",
                            Points = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Вопоос 4 ...",
                            Points = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Вопоос 1 ...",
                            Points = 1,
                            TestId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "Вопоос 2 ...",
                            Points = 1,
                            TestId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Вопоос 3 ...",
                            Points = 1,
                            TestId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Вопоос 4 ...",
                            Points = 1,
                            TestId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Вопоос 1 ...",
                            Points = 1,
                            TestId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "Вопоос 2 ...",
                            Points = 1,
                            TestId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "Вопоос 3 ...",
                            Points = 1,
                            TestId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "Вопоос 4 ...",
                            Points = 1,
                            TestId = 3
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "hr"
                        },
                        new
                        {
                            Id = 4,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "работает"
                        },
                        new
                        {
                            Id = 2,
                            Name = "в отпуске"
                        },
                        new
                        {
                            Id = 3,
                            Name = "в командировке"
                        },
                        new
                        {
                            Id = 4,
                            Name = "уволен"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Decription = "Тариф для личного пользования и  небольших компаний",
                            EmployeeLimit = 5,
                            Name = "бесплатный",
                            Price = 0
                        },
                        new
                        {
                            Id = 2,
                            Decription = "Тариф для ИП и малого бизнеса",
                            EmployeeLimit = 50,
                            Name = "малый бизнес",
                            Price = 5000
                        },
                        new
                        {
                            Id = 3,
                            Decription = "Тариф для средних предприятий",
                            EmployeeLimit = 500,
                            Name = "средний",
                            Price = 10000
                        },
                        new
                        {
                            Id = 4,
                            Decription = "Тариф для копораций без лимита по пользователям",
                            EmployeeLimit = -1,
                            Name = "корпорация",
                            Price = 100000
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Тест по веб-разработке",
                            EndDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Тест1",
                            StartDate = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Тест по тестированию",
                            EndDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Тест2",
                            StartDate = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Тест по рабработке игр",
                            EndDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Тест3",
                            StartDate = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirdh")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            DateOfBirdh = new DateOnly(2000, 2, 23),
                            Firstname = "Глеб",
                            Patronymic = "Артемович",
                            Surname = "Рогов"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            DateOfBirdh = new DateOnly(1998, 2, 23),
                            Firstname = "Иванов",
                            Patronymic = "Максимович",
                            Surname = "Артем"
                        });
                });

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.HasOne("Hackathon.Models.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Option", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hackathon.Models.Answer", b =>
                {
                    b.HasOne("Hackathon.Models.PassedTests", "PassedTests")
                        .WithMany("Answers")
                        .HasForeignKey("PassedTestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedTests");
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.HasOne("Hackathon.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.HasOne("Hackathon.Models.Department", null)
                        .WithMany("ChildDepartment")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hackathon.Models.Organization", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Hackathon.Models.EducationalMaterial", b =>
                {
                    b.HasOne("Hackathon.Models.ContentType", "ContentType")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Course", "Course")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.HasOne("Hackathon.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon.Models.Option", b =>
                {
                    b.HasOne("Hackathon.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.HasOne("Hackathon.Models.Color", "Color")
                        .WithMany("Organizations")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Tariff", "Tariff")
                        .WithMany("Organizations")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.HasOne("Hackathon.Models.Employee", "Employee")
                        .WithMany("PassedTests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Test", "Test")
                        .WithMany("PassedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.HasOne("Hackathon.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.HasOne("Hackathon.Models.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.HasOne("Hackathon.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Hackathon.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hackathon.Models.Account", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Hackathon.Models.Color", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Hackathon.Models.ContentType", b =>
                {
                    b.Navigation("EducationalMaterials");
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.Navigation("EducationalMaterials");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.Navigation("ChildDepartment");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.Navigation("PassedTests");
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Hackathon.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hackathon.Models.Status", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hackathon.Models.Tariff", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.Navigation("PassedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
