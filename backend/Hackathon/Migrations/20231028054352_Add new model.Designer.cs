// <auto-generated />
using System;
using Hackathon.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hackathon.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231028054352_Add new model")]
    partial class Addnewmodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.23");

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.Property<int>("AnswersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswersId", "OptionsId");

                    b.HasIndex("OptionsId");

                    b.ToTable("AnswerOption");
                });

            modelBuilder.Entity("Hackathon.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Hackathon.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassedTestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PassedTestsId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Hackathon.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Hackathon.Models.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "текст"
                        },
                        new
                        {
                            Id = 2,
                            Name = "иллюстрация"
                        },
                        new
                        {
                            Id = 3,
                            Name = "видео"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ссылка на учебный материал"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChildDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChildDepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hackathon.Models.EducationalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CourseId");

                    b.ToTable("EducationalMaterials");
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Post")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Hackathon.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Goal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mission")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TariffId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("TariffId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TestId");

                    b.ToTable("PassedTests");
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Hackathon.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "superuser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "работает"
                        },
                        new
                        {
                            Id = 2,
                            Name = "в отпуске"
                        },
                        new
                        {
                            Id = 3,
                            Name = "в командировке"
                        },
                        new
                        {
                            Id = 4,
                            Name = "уволен"
                        });
                });

            modelBuilder.Entity("Hackathon.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirdh")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnswerOption", b =>
                {
                    b.HasOne("Hackathon.Models.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Option", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hackathon.Models.Answer", b =>
                {
                    b.HasOne("Hackathon.Models.PassedTests", "PassedTests")
                        .WithMany("Answers")
                        .HasForeignKey("PassedTestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedTests");
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.HasOne("Hackathon.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.HasOne("Hackathon.Models.Department", "ChildDepartment")
                        .WithMany()
                        .HasForeignKey("ChildDepartmentId");

                    b.HasOne("Hackathon.Models.Organization", null)
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("ChildDepartment");
                });

            modelBuilder.Entity("Hackathon.Models.EducationalMaterial", b =>
                {
                    b.HasOne("Hackathon.Models.ContentType", "ContentType")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Course", "Course")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.HasOne("Hackathon.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon.Models.Option", b =>
                {
                    b.HasOne("Hackathon.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.HasOne("Hackathon.Models.Color", "Color")
                        .WithMany("Organizations")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Tariff", "Tariff")
                        .WithMany("Organizations")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.HasOne("Hackathon.Models.Employee", "Employee")
                        .WithMany("PassedTests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackathon.Models.Test", "Test")
                        .WithMany("PassedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.HasOne("Hackathon.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.HasOne("Hackathon.Models.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.HasOne("Hackathon.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Hackathon.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hackathon.Models.Account", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Hackathon.Models.Color", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Hackathon.Models.ContentType", b =>
                {
                    b.Navigation("EducationalMaterials");
                });

            modelBuilder.Entity("Hackathon.Models.Course", b =>
                {
                    b.Navigation("EducationalMaterials");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Hackathon.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Hackathon.Models.Employee", b =>
                {
                    b.Navigation("PassedTests");
                });

            modelBuilder.Entity("Hackathon.Models.Organization", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Hackathon.Models.PassedTests", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Hackathon.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Hackathon.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hackathon.Models.Status", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hackathon.Models.Tariff", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Hackathon.Models.Test", b =>
                {
                    b.Navigation("PassedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hackathon.Models.User", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
